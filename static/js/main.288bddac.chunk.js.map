{"version":3,"sources":["components/landingpage.js","components/aboutme.js","components/contact.js","components/projects.js","components/resume.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landing","style","width","margin","className","col","class","src","alt","About","Contact","Projects","Resume","Main","exact","path","component","App","title","scroll","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAsCeA,MApCf,WACI,OACI,yBAAKC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACjC,kBAAC,OAAD,CAAMC,UAAU,gBACZ,kBAAC,OAAD,CAAMC,IAAK,KACX,yBAAKD,UAAU,aACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eACX,0BAAME,MAAM,UAAZ,0BACA,0BAAMA,MAAM,UAAZ,KAAuB,8CAAvB,cAGR,yBAAKF,UAAU,aACX,6BACI,yBAAKG,IAAI,qEAAqEC,IAAI,aAAaJ,UAAU,kBAKzH,yBAAKA,UAAU,eACX,wDAGA,6BACA,mFCnBLK,MAPf,WACI,OACI,6BAAK,4CCKEC,MAPf,WACI,OACI,6BAAK,8CCKEC,MAPf,WACI,OACI,6BAAK,+CCKEC,MAPf,WACI,OACI,6BAAK,6CCiBEC,EAZF,WACT,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IACjC,kBAAC,IAAD,CAAOe,KAAK,WAAWC,UAAWP,IAClC,kBAAC,IAAD,CAAOM,KAAK,WAAWC,UAAWN,IAClC,kBAAC,IAAD,CAAOK,KAAK,YAAYC,UAAWL,IACnC,kBAAC,IAAD,CAAOI,KAAK,UAAUC,UAAWJ,M,OCoB9BK,MA7Bf,WACI,OACI,yBAAKb,UAAU,oBACX,kBAAC,SAAD,KACI,kBAAC,SAAD,CAAQc,MAAM,QAAQC,QAAM,EAACf,UAAU,gBACnC,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMgB,GAAG,WAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,cACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,cACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,eAGR,kBAAC,SAAD,CAAQF,MAAM,SACV,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAME,GAAG,WAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,cACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,cACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,eAGR,kBAAC,UAAD,KACI,yBAAKhB,UAAU,iBACf,kBAAC,EAAD,UChBAiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OAEL,kBAAC,IAAD,KACA,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.288bddac.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Grid, Cell } from 'react-mdl';\r\nfunction Landing() {\r\n    return (\r\n        <div style={{ width: '100%', margin: 'auto' }}>\r\n            <Grid className=\"landing-grid\">\r\n                <Cell col={12}></Cell>\r\n                <div className=\"container\">\r\n                    <div className=\"avatar\">\r\n                        <div className=\"chat\">\r\n                            <div className=\"chatContent\">\r\n                                <span class=\"text_1\">Hi! My name is Harsha.</span>\r\n                                <span class=\"text_2\">I <span>ðŸ’–</span> to code</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"avatardiv\">\r\n                            <div>\r\n                                <img src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/751678/skytsunami.png\" alt=\"Skytsunami\" className=\"avatarimg\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"banner-text\">\r\n                    <h1>\r\n                        Full Stack Web Developer\r\n                        </h1>\r\n                    <hr />\r\n                    <p>HTML/CSS | Javascript | React | NodeJS | Android</p>\r\n\r\n                </div>\r\n            </Grid>\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Landing;","import React from 'react';\r\nfunction About() {\r\n    return(\r\n        <div><h1>About page</h1></div>\r\n    )\r\n\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nfunction Contact() {\r\n    return(\r\n        <div><h1>Contact page</h1></div>\r\n    )\r\n\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nfunction Projects() {\r\n    return(\r\n        <div><h1>Projects page</h1></div>\r\n    )\r\n\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nfunction Resume() {\r\n    return(\r\n        <div><h1>Resume page</h1></div>\r\n    )\r\n\r\n}\r\n\r\nexport default Resume;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Landing from './landingpage';\r\nimport About from './aboutme';\r\nimport Contact from './contact';\r\nimport Projects from './projects';\r\nimport Resume from './resume';\r\n\r\nconst Main = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Landing} />\r\n            <Route path=\"/aboutme\" component={About} />\r\n            <Route path=\"/contact\" component={Contact} />\r\n            <Route path=\"/projects\" component={Projects} />\r\n            <Route path=\"/resume\" component={Resume} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\nimport Main from './components/main';\nimport { Link } from 'react-router-dom';\n\nfunction App() {\n    return (\n        <div className=\"demo-big-content\">\n            <Layout>\n                <Header title=\"Title\" scroll className=\"header-color\">\n                    <Navigation >\n                        <Link to=\"/resume\" > Resume </Link>\n                        <Link to=\"/aboutme\" > About me </Link>\n                        <Link to=\"/projects\" > Projects </Link>\n                        <Link to=\"/contact\" > Contact </Link>\n                    </Navigation >\n                </Header>\n                <Drawer title=\"Title\">\n                    <Navigation >\n                        <Link to=\"/resume\" > Resume </Link>\n                        <Link to=\"/aboutme\" > About me </Link>\n                        <Link to=\"/projects\" > Projects </Link>\n                        <Link to=\"/contact\" > Contact </Link>\n                    </Navigation >\n                </Drawer>\n                <Content>\n                    <div className=\"page-content\" />\n                    <Main/>\n                </Content>\n            </Layout>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  // <React.StrictMode> \n    <BrowserRouter>\n    <App />\n    </BrowserRouter>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}